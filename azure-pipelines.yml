# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: sudo apt-get install -y qemu-system
  displayName: "Install QEMU"
- script: packer --version
  displayName: "Check version of packer"
- script: echo $(System.DefaultWorkingDirectory)
  displayName: "Show $(System.DefaultWorkingDirectory)"
- script: |
    mkdir -p $(System.DefaultWorkingDirectory)/shared
    mkdir -p $(System.DefaultWorkingDirectory)/shared
  displayName: "Create packer tmp dirs"
- task: UniversalPackages@0
  displayName: Download Windows Enterprise ISO
  inputs:
    command: publish
    publishDirectory: '$(Pipeline.Workspace)/artifacts'
    vstsFeedPublish: 'unswIT-SDD-DevEnv/TestArtifactFeed'
    vstsFeedPackagePublish: 'windows_10_ent_ltsc_2019_iso'
    packagePublishDescription: 'WINDOWS_Microsoft_Windows_10_Ent_LTSC_2019_64b.iso'
- task: UniversalPackages@0
  displayName: Download virtio-win drivers ISO
  inputs:
    command: publish
    publishDirectory: '$(Pipeline.Workspace)/artifacts'
    vstsFeedPublish: 'unswIT-SDD-DevEnv/TestArtifactFeed'
    vstsFeedPackagePublish: 'virtio-win_iso'
    packagePublishDescription: 'virtio-win-0.1.171.iso'
- task: PackerBuild@1
  inputs:
    templateType: 'custom'
    customTemplateLocation: 'windows_10_enterprise_lite.json'
    customTemplateParameters: |
      {"iso_url": "$(Pipeline.Workspace)/artifacts/windows_10_ent_ltsc_2019_iso",
      "virtio_win_iso": "$(Pipeline.Workspace)/artifacts/virtio_win_iso",
      "output_directory": "$(System.DefaultWorkingDirectory)/shared/packer_tmp",
      "post_proc_output": "$(System.DefaultWorkingDirectory)/shared/packer_out"}
- publish: $(System.DefaultWorkingDirectory)/shared/packer_out
  artifact: windows_10_ent

